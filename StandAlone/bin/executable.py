from keras.models import load_model
import numpy as np
import argparse

"""
Part 0, define amino acid map, must be consistent with PSSM ordering generated by psiblast
treat protein X->A, protein B->N and protein Z->Q
"""

aaMap = {'A': 0, 'R': 1, 'N': 2, 'D': 3, 'C': 4, 'Q': 5, 'E': 6, 'G': 7, 'H': 8, 'I': 9, 'L': 10, 'K': 11, 'M': 12,
         'F': 13, 'P': 14, 'S': 15, 'T': 16, 'W': 17, 'Y': 18, 'V': 19, 'X': 0, 'B': 2, 'Z': 5, 'NoSeq': 20}
np.concatenate

"""
Part 1, Load seqeunce from fasta
"""

def printWarmingMessage(seq):
    if 'B' in seq:
        print 'Your query sequence contains protein B, which will be treated as protein N'
    if 'Z' in seq:
        print 'Your query sequence contains protein Z, which will be treated as protein Q'
    if 'X' in seq:
        print 'Your query sequence contains protein X, which will be treated as protein A'
    if len(seq) > 700:
        print 'too long, please provide a shorter one'
        exit(1)


def processFastaFile(fastaFileInput):
    file = open(fastaFileInput, 'r')
    file.readline()
    seq = file.readline().rstrip()
    seqLength = len(seq)
    printWarmingMessage(seq)
    sequence_vector = np.zeros([700, 21])
    for i in range(0, seqLength):
        sequence_vector[i, aaMap[seq[i]]] = 1
    for i in range(seqLength, 700):
        sequence_vector[i, -1] = 1
    return sequence_vector


"""
Part 2, Load profile generated by psiblast
"""


def logistic(t):
    return 1.0 / (1 + np.exp(-t))


def processProfileFile(PSSMFileName):
    npArr = np.zeros([700, 21])
    index = 0
    with open(PSSMFileName) as fileIn:
        next(fileIn)
        next(fileIn)
        for line in fileIn:
            if '-I' in line:
                print 'bad profile file, it contains -I in the profile!'
                exit(-1)
            elements = line.split()
            if (len(elements) == 44 or len(elements) == 22):
                npArr[index, 0:20] = [logistic(int(x)) for x in elements[2:22]]
                index = index + 1
    for i in range(index, 700):
        npArr[i, -1] = 1
    return npArr


def convertPredictQ3Result2HumanReadable(predictedSS):
    predSS = np.argmax(predictedSS, axis=-1)
    # convert back map meaning; 0 for Helix, 1 for strand, 2 for coil, 3 for noSeq and protein 'X', if any
    ssConvertMap = {0: 'H', 1: 'E', 2: 'C', 3: ''}
    result = []
    for i in range(0, 700):
        result.append(ssConvertMap[predSS[i]])
    return ''.join(result)


def convertPredictQ8Result2HumanReadable(predictedSS):
    predSS = np.argmax(predictedSS, axis=-1)
    ssConvertMap = {0: 'C', 1: 'B', 2: 'E', 3: 'G', 4: 'I', 5: 'H', 6: 'S', 7: 'T', 8: ''}
    result = []
    for i in range(0, 700):
        result.append(ssConvertMap[predSS[i]])
    return ''.join(result)


"""
Part 3, Load trained weights for proposed deep Inception Networks
"""


def main():
    """
    You should only change BASIC_DIR to the path you download the tool

    """

    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--sequence', help='protein sequence')
    parser.add_argument('-p', '--profile', help='protein profile')
    parser.add_argument('-wQ3', '--weightsQ3', help='deep neural network pre-trained weights for Q3')
    parser.add_argument('-wQ8', '--weightsQ8', help='deep neural network pre-trained weights for Q8')
    args = parser.parse_args()

    sequenceFile = args.sequence
    sequence_vector = processFastaFile(sequenceFile)
    sequence_vector = np.reshape(sequence_vector, (1, 700, 21))

    profileFile = args.profile
    profile_vector = processProfileFile(profileFile)
    profile_vector = np.reshape(profile_vector, (1, 700, 21))

    modelWeightsQ3 = args.weightsQ3
    modelQ3 = load_model(modelWeightsQ3)
    predictedQ3SS = modelQ3.predict([sequence_vector, profile_vector])
    predictedQ3SS = np.reshape(predictedQ3SS, (700, 4))
    finalResultQ3 = convertPredictQ3Result2HumanReadable(predictedQ3SS)
    print ('Q3 results:')
    print finalResultQ3

    modelWeightsQ8 = args.weightsQ8
    modelQ8 = load_model(modelWeightsQ8)
    predictedQ8SS = modelQ8.predict([sequence_vector, profile_vector])
    predictedQ8SS = np.reshape(predictedQ8SS, (700, 9))
    finalResultQ8 = convertPredictQ8Result2HumanReadable(predictedQ8SS)
    print ('Q8 results:')
    print finalResultQ8
    np.array()

if __name__ == "__main__":
    main()

